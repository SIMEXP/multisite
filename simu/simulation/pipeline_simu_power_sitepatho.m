clear
addpath(genpath('/usr/local/niak/niak-0.12.19'))
%addpath(genpath('/home/cdansereau/git/niak'));
%addpath(genpath('/home/cdansereau/svn/psom'));
%addpath(genpath('/usr/local/niak-boss/niak-v0.13.1/'));
addpath(genpath('/home/cdansereau/svn/projects/multisite/simulation/'));
%path_data = '/data/cisl/cdansereau/adni2/connectomes_multisite'
%path_data = '/data/cisl/cdansereau/adni2/connectomes_multisite_02'
%path_data = '/data/cisl/cdansereau/multisite/simulations/sim_site_patho/'

path_data = '/data/cisl/cdansereau/multisite/simulations_corr/sim_site_patho/'

test_list = {'_1000samp_15pct','_1000samp_30pct','_1000samp_50pct'};
sample_sizes = [33,40,80,120];
balancing = [0.15,0.30,0.5];

main_pipeline = struct();
for i_samp_size=1:size(sample_sizes,2)
    for i_balancing=1:size(balancing,2)

        test_str = ['s' num2str(sample_sizes(i_samp_size)) '_' num2str(100*balancing(i_balancing)) 'pct'];
        
        list_effect_size = [0:0.01:2];
        list_p = [0.001 0.01 0.05];
        pipeline = struct;
        list_simu = cell(length(list_p),length(list_effect_size));
        for num_p = 1:length(list_p)
            for num_e = 1:length(list_effect_size)
                clear job
                job.in = [path_data filesep 'n_subject_estimation_bis.mat'];
                job.out = sprintf('%s/samps_%s/simu_eff%i_p%i.mat',path_data,test_str,100*list_effect_size(num_e),100*list_p(num_p));
                list_simu{num_p,num_e} = job.out;
                job.opt.effect_size = list_effect_size(num_e);
                job.opt.nb_samps = 1000;%1000000;
                job.opt.alpha = balancing(i_balancing);
                job.opt.n_subjects = sample_sizes(i_samp_size);
                job.opt.threshold_p = list_p(num_p);
                job.opt.rand_seed = [100*list_effect_size(num_e) 100*list_p(num_p)];
                job.opt.seed_std = []; % std of the data after scrubbing 0.5
                job.opt.patho_site_bias=true;
                pipeline = psom_add_job(pipeline,sprintf('simu_eff%i_p%i',100*list_effect_size(num_e),100*list_p(num_p)),'multisite_brick_simu_power',job.in,job.out,job.opt);
            end
        end

        %'sens_monosite','sens_multisite_nocorr','sens_multisite_dummyvar','sens_multisite_metal'

    
        pipeline.summary_simu_power.files_in = list_simu;
        pipeline.summary_simu_power.files_out = sprintf('%s/samps_%s/results_simu_power.mat',path_data,test_str);
        pipeline.summary_simu_power.opt.list_effect_size = list_effect_size;
        pipeline.summary_simu_power.opt.list_p = list_p;
        pipeline.summary_simu_power.command = ...
  	['for num_p = 1:size(files_in,1); ' ...
         'for num_e = 1:size(files_in,2); ' ...
         'data = load(files_in{num_p,num_e});' ...
         'if (num_p == 1)&&(num_e==1);' ...
         'sens_monosite_h0 = zeros(size(files_in,1),size(files_in,2),length(data.sens_monosite_h0));' ...
         'sens_multisite_h0 = zeros(size(files_in,1),size(files_in,2),length(data.sens_multisite_h0));' ...
         'sens_multisite_h0_dummy = zeros(size(files_in,1),size(files_in,2),length(data.sens_multisite_h0_dummy));' ...
         'sens_multisite_h0_metal = zeros(size(files_in,1),size(files_in,2),length(data.sens_multisite_h0_metal));' ...
         'sens_monosite = zeros(size(files_in,1),size(files_in,2),length(data.sens_monosite));' ...
         'sens_multisite_nocorr = zeros(size(files_in,1),size(files_in,2),length(data.sens_multisite_nocorr));' ...
         'sens_multisite_dummyvar = zeros(size(files_in,1),size(files_in,2),length(data.sens_multisite_dummyvar));' ...
         'sens_multisite_metal = zeros(size(files_in,1),size(files_in,2),length(data.sens_multisite_metal));' ...
         'sampsize = zeros(size(files_in,1),size(files_in,2));' ...
         'end;' ...
         'sens_monosite_h0(num_p,num_e,:) = data.sens_monosite_h0;' ...
         'sens_multisite_h0(num_p,num_e,:) = data.sens_multisite_h0;' ...
         'sens_multisite_h0_dummy(num_p,num_e,:) = data.sens_multisite_h0_dummy;' ...
         'sens_multisite_h0_metal(num_p,num_e,:) = data.sens_multisite_h0_metal;' ...
         'sens_monosite(num_p,num_e,:) = data.sens_monosite;' ...
         'sens_multisite_nocorr(num_p,num_e,:) = data.sens_multisite_nocorr;' ...
         'sens_multisite_dummyvar(num_p,num_e,:) = data.sens_multisite_dummyvar;' ...
         'sens_multisite_metal(num_p,num_e,:) = data.sens_multisite_metal;' ...
         'end;' ...
         'end;' ...
         'list_effect_size = opt.list_effect_size;' ...
         'list_p = opt.list_p;' ...
         'save(files_out,''sens_monosite_h0'',''sens_multisite_h0'',''sens_multisite_h0_dummy'',''sens_multisite_h0_metal'',''sens_monosite'',''sens_multisite_nocorr'',''sens_multisite_dummyvar'',''sens_multisite_metal'',''list_effect_size'',''list_p'');'];
   
     main_pipeline = psom_merge_pipeline(main_pipeline,pipeline,test_str);
    end
    


   if sample_sizes(i_samp_size) == 33
        test_str = ['s' num2str(sample_sizes(i_samp_size)) '_25_75'];

        list_effect_size = [0:0.01:2];
        list_p = [0.001 0.01 0.05];
        pipeline = struct();
        list_simu = cell(length(list_p),length(list_effect_size));
        for num_p = 1:length(list_p)
            for num_e = 1:length(list_effect_size)
                clear job
                job.in = [path_data filesep 'n_subject_estimation_bis.mat'];
                job.out = sprintf('%s/samps_%s/simu_eff%i_p%i.mat',path_data,test_str,100*list_effect_size(num_e),100*list_p(num_p));
                list_simu{num_p,num_e} = job.out;
                job.opt.effect_size = list_effect_size(num_e);
                job.opt.nb_samps = 1000;%1000000;
                job.opt.alpha = 0.5;
                job.opt.n_subjects = sample_sizes(i_samp_size);
                job.opt.threshold_p = list_p(num_p);
                job.opt.rand_seed = [100*list_effect_size(num_e) 100*list_p(num_p)];
                job.opt.seed_std = []; % std of the data after scrubbing 0.5
                job.opt.rnd_sampling = false;
                job.opt.force_balance = [0.25,0.75];
                job.opt.patho_site_bias=true;
                pipeline = psom_add_job(pipeline,sprintf('simu_eff%i_p%i',100*list_effect_size(num_e),100*list_p(num_p)),'multisite_brick_simu_power',job.in,job.out,job.opt);
            end
        end
   
        %'sens_monosite','sens_multisite_nocorr','sens_multisite_dummyvar','sens_multisite_metal'


        pipeline.summary_simu_power.files_in = list_simu;
        pipeline.summary_simu_power.files_out = sprintf('%s/samps_%s/results_simu_power.mat',path_data,test_str);
        pipeline.summary_simu_power.opt.list_effect_size = list_effect_size;
        pipeline.summary_simu_power.opt.list_p = list_p;
        pipeline.summary_simu_power.command = ...
	['for num_p = 1:size(files_in,1); ' ...
         'for num_e = 1:size(files_in,2); ' ...
         'data = load(files_in{num_p,num_e});' ...
         'if (num_p == 1)&&(num_e==1);' ...
         'sens_monosite_h0 = zeros(size(files_in,1),size(files_in,2),length(data.sens_monosite_h0));' ...
         'sens_multisite_h0 = zeros(size(files_in,1),size(files_in,2),length(data.sens_multisite_h0));' ...
         'sens_multisite_h0_dummy = zeros(size(files_in,1),size(files_in,2),length(data.sens_multisite_h0_dummy));' ...
         'sens_multisite_h0_metal = zeros(size(files_in,1),size(files_in,2),length(data.sens_multisite_h0_metal));' ...
         'sens_monosite = zeros(size(files_in,1),size(files_in,2),length(data.sens_monosite));' ...
         'sens_multisite_nocorr = zeros(size(files_in,1),size(files_in,2),length(data.sens_multisite_nocorr));' ...
         'sens_multisite_dummyvar = zeros(size(files_in,1),size(files_in,2),length(data.sens_multisite_dummyvar));' ...
         'sens_multisite_metal = zeros(size(files_in,1),size(files_in,2),length(data.sens_multisite_metal));' ...
         'sampsize = zeros(size(files_in,1),size(files_in,2));' ...
         'end;' ...
         'sens_monosite_h0(num_p,num_e,:) = data.sens_monosite_h0;' ...
         'sens_multisite_h0(num_p,num_e,:) = data.sens_multisite_h0;' ...
         'sens_multisite_h0_dummy(num_p,num_e,:) = data.sens_multisite_h0_dummy;' ...
         'sens_multisite_h0_metal(num_p,num_e,:) = data.sens_multisite_h0_metal;' ...
         'sens_monosite(num_p,num_e,:) = data.sens_monosite;' ...
         'sens_multisite_nocorr(num_p,num_e,:) = data.sens_multisite_nocorr;' ...
         'sens_multisite_dummyvar(num_p,num_e,:) = data.sens_multisite_dummyvar;' ...
         'sens_multisite_metal(num_p,num_e,:) = data.sens_multisite_metal;' ...
         'end;' ...
         'end;' ...
         'list_effect_size = opt.list_effect_size;' ...
         'list_p = opt.list_p;' ...
         'save(files_out,''sens_monosite_h0'',''sens_multisite_h0'',''sens_multisite_h0_dummy'',''sens_multisite_h0_metal'',''sens_monosite'',''sens_multisite_nocorr'',''sens_multisite_dummyvar'',''sens_multisite_metal'',''list_effect_size'',''list_p'');'];
     

	main_pipeline = psom_merge_pipeline(main_pipeline,pipeline,test_str);

   end

end

opt_pipe.path_logs = [path_data filesep 'logs'];

opt_pipe.max_queued = 62;
psom_run_pipeline(main_pipeline,opt_pipe);
